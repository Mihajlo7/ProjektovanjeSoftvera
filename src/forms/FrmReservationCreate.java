/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forms;

import controller.OpstiKontrolerKI;
import domain.Bibliotekar;
import domain.Clan;
import domain.Knjiga;
import domain.Rezervacija;
import domain.Stavka_Rezervacije;
import exception.ServerskiException;
import java.awt.Font;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import tablemodel.ClanoviTableModel;
import tablemodel.KnjigeTableModel;

/**
 *
 * @author Mihajlo
 */
public class FrmReservationCreate extends javax.swing.JDialog {

    /**
     * Creates new form FrmReservationCreate
     */
    Bibliotekar admin;
    ClanoviTableModel model;
    KnjigeTableModel modelUlaz;
    KnjigeTableModel modelIzlaz;
    List<Knjiga> knjigeRezervacija;
    Rezervacija rezervacija;
    public FrmReservationCreate(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        model=new ClanoviTableModel();
        modelIzlaz=new KnjigeTableModel();
        modelUlaz=new KnjigeTableModel();
        knjigeRezervacija=new LinkedList<>();
        namestiPolja();
        //kreirajRezervaciju();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableMember = new javax.swing.JTable();
        txtTelefon = new javax.swing.JTextField();
        btnGetMember = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableKnjigeUlaz = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableKnjigeIzlaz = new javax.swing.JTable();
        btnAddBook = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtSifraKnjige = new javax.swing.JTextField();
        txtNazivKnjige = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtAutorKnjige = new javax.swing.JTextField();
        btnGetBooks = new javax.swing.JButton();
        btnEjectBook = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDatumIznamljivanja = new javax.swing.JTextField();
        txtDatumVracanja = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnReservationConfirm = new javax.swing.JButton();
        btnReservationSave = new javax.swing.JButton();
        btnSetFieldNull = new javax.swing.JButton();
        btnKreirajRezervaciju = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Telefon:");

        tableMember.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableMember);

        txtTelefon.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnGetMember.setText("Pretraži");
        btnGetMember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetMemberActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(729, 729, 729)
                        .addComponent(btnGetMember, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1155, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtTelefon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 14, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(btnGetMember, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        tableKnjigeUlaz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableKnjigeUlaz);

        tableKnjigeIzlaz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(tableKnjigeIzlaz);

        btnAddBook.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddBook.setText("Dodaj ");
        btnAddBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBookActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Šifra:");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Naziv:");

        txtSifraKnjige.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtNazivKnjige.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Autor:");

        txtAutorKnjige.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btnGetBooks.setText("Pretraži");
        btnGetBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGetBooksActionPerformed(evt);
            }
        });

        btnEjectBook.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEjectBook.setText("Izbaci");
        btnEjectBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjectBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSifraKnjige))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNazivKnjige))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtAutorKnjige, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(199, 199, 199)
                        .addComponent(btnGetBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddBook, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEjectBook, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 571, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSifraKnjige, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNazivKnjige, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGetBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtAutorKnjige, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(17, 17, 17))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addComponent(btnAddBook, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(31, 31, 31)
                            .addComponent(btnEjectBook, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(64, 64, 64)))))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Datum Iznamljivanja:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel6.setText("Datum Vraćanja:");

        txtDatumIznamljivanja.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txtDatumVracanja.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(txtDatumIznamljivanja)
                    .addComponent(txtDatumVracanja, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))
                .addContainerGap(146, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addComponent(txtDatumIznamljivanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(txtDatumVracanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        btnBack.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnBack.setText("Nazad ");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnReservationConfirm.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReservationConfirm.setText("Vraćanje knjige");

        btnReservationSave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnReservationSave.setText("Zapamti rezervaciju");
        btnReservationSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReservationSaveActionPerformed(evt);
            }
        });

        btnSetFieldNull.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSetFieldNull.setText("Poništi");
        btnSetFieldNull.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetFieldNullActionPerformed(evt);
            }
        });

        btnKreirajRezervaciju.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnKreirajRezervaciju.setText("Kreiraj rezervaciju");
        btnKreirajRezervaciju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnKreirajRezervacijuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnReservationConfirm)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReservationSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSetFieldNull, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnKreirajRezervaciju, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReservationConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addComponent(btnKreirajRezervaciju, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnReservationSave, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(btnSetFieldNull, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGetMemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetMemberActionPerformed
        // TODO add your handling code here:
        HashMap<String,String> kriterijum=new HashMap<>();
        if(!txtTelefon.getText().isEmpty()){
            kriterijum.put("telefonClana",txtTelefon.getText());
        }
        try {
            model.setClanovi(OpstiKontrolerKI.getInstance().nadjiClanove(kriterijum));
            tableMember.setModel(model);
        } catch (ServerskiException ex) {
            JOptionPane.showMessageDialog(this, ex,"GRESKA",JOptionPane.ERROR_MESSAGE);
        } catch( Exception ex){
            JOptionPane.showMessageDialog(this,"Doslo je do prekida rada servera!","GRESKA",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGetMemberActionPerformed

    private void btnAddBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBookActionPerformed
        // TODO add your handling code here:
        int selected=tableKnjigeUlaz.getSelectedRow();
        if(selected>-1){
            KnjigeTableModel model=(KnjigeTableModel) tableKnjigeUlaz.getModel();
            Knjiga knjiga=model.getKnjige().get(selected);
            if(!pripada(knjiga)){
                knjigeRezervacija.add(knjiga);
                modelIzlaz.dodajRed(knjiga);
            }else{
                JOptionPane.showMessageDialog(this, "Ne mozete dodati 2 puta isti primerak knjige!","Upozorenje",JOptionPane.WARNING_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Morate odabrati jednu knjigu!");
        }
    }//GEN-LAST:event_btnAddBookActionPerformed

    private void btnGetBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGetBooksActionPerformed
        try {
            // TODO add your handling code here:
            List<Knjiga> knjige=pronadjiKnjigePoKriterijumu();
            modelUlaz.setKnjige(knjige);
            tableKnjigeUlaz.setModel(modelUlaz);
        } catch (Exception ex) {
            Logger.getLogger(FrmReservationCreate.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGetBooksActionPerformed

    private void btnEjectBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjectBookActionPerformed
        // TODO add your handling code here:
        int selected=tableKnjigeIzlaz.getSelectedRow();
        if(selected>-1){
            KnjigeTableModel model=(KnjigeTableModel) tableKnjigeIzlaz.getModel();
            Knjiga knjiga=model.getKnjige().get(selected);
            knjigeRezervacija.remove(knjiga);
            modelIzlaz.obrisiRed(selected, knjiga);
        }else{
            JOptionPane.showMessageDialog(this, "Morate odabrati jednu knjigu koju hocete da izbacite!");
        }
    }//GEN-LAST:event_btnEjectBookActionPerformed

    private void btnSetFieldNullActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetFieldNullActionPerformed
        try {
            // TODO add your handling code here:
            txtTelefon.setText("");
            txtNazivKnjige.setText("");
            txtAutorKnjige.setText("");
            txtSifraKnjige.setText("");
            txtDatumVracanja.setText("");
            txtDatumIznamljivanja.setText("");
            namestiTabeleKnjige();
            namestiTabeluClanovi();
            
            //namestiPolja();
        } catch (Exception ex) {
            Logger.getLogger(FrmReservationCreate.class.getName()).log(Level.SEVERE, null, ex);
            dispose();
        }
    }//GEN-LAST:event_btnSetFieldNullActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        if(rezervacija==null){
            dispose();
        }else{
          int option=JOptionPane.showConfirmDialog(this, "Da li hocete da izadjete, ako izadjete svi podaci ce biti obrisani!","Izlazak",JOptionPane.YES_NO_OPTION);
        if(option==0){
            obrisiRezervaciju();
            dispose();
        }  
        }
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnReservationSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReservationSaveActionPerformed
        // TODO add your handling code here:
        if(proveraPolja()){
            try {
                setRezervacija();
                zapamtiRezervaciju();
                JOptionPane.showMessageDialog(this, "Uspesno ste sacuvali rezervaciju:"+rezervacija.getSifra()+"\nBroj stavki reezervacije:"+rezervacija.getStavkeRezervacije().size());
                int option=JOptionPane.showConfirmDialog(this, "Da li hocete da kreirate jos rezervacija?","Kreiranje rezervacija",JOptionPane.YES_NO_OPTION);
                if(option==0){
                   kreirajRezervaciju();
                   refresujPolja();
                }else{
                    dispose();
                }
                
            } catch (ServerskiException ex) {
                JOptionPane.showMessageDialog(this,ex,"GRESKA",JOptionPane.ERROR_MESSAGE);
            } catch(Exception ex){
                JOptionPane.showMessageDialog(this,"Sistem ne moze da zapamti rezervaciju","GRESKA",JOptionPane.ERROR_MESSAGE);
            }
        }
       
    }//GEN-LAST:event_btnReservationSaveActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(rezervacija==null){
           dispose(); 
        }else{
        JOptionPane.showMessageDialog(this, "Podaci o rezervaciji ce biti obrisani!","Upozorenje",JOptionPane.WARNING_MESSAGE);
        obrisiRezervaciju();
        }
    }//GEN-LAST:event_formWindowClosing

    private void btnKreirajRezervacijuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnKreirajRezervacijuActionPerformed
        try {
            // TODO add your handling code here:
            kreirajRezervaciju();
            podesiPolja(true);
            model.setClanovi(OpstiKontrolerKI.getInstance().ucitajSveClanove());
            //btnKreirajRezervaciju.setEnabled(false);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da kreira rezervaciju");
        }
    }//GEN-LAST:event_btnKreirajRezervacijuActionPerformed

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddBook;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnEjectBook;
    private javax.swing.JButton btnGetBooks;
    private javax.swing.JButton btnGetMember;
    private javax.swing.JButton btnKreirajRezervaciju;
    private javax.swing.JButton btnReservationConfirm;
    private javax.swing.JButton btnReservationSave;
    private javax.swing.JButton btnSetFieldNull;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tableKnjigeIzlaz;
    private javax.swing.JTable tableKnjigeUlaz;
    private javax.swing.JTable tableMember;
    private javax.swing.JTextField txtAutorKnjige;
    private javax.swing.JTextField txtDatumIznamljivanja;
    private javax.swing.JTextField txtDatumVracanja;
    private javax.swing.JTextField txtNazivKnjige;
    private javax.swing.JTextField txtSifraKnjige;
    private javax.swing.JTextField txtTelefon;
    // End of variables declaration//GEN-END:variables

    private void namestiPolja() {
        try {
            setTitle("Kreiranje rezervacije");
            namestiTabeleKnjige();
            namestiTabeluClanovi();
            podesiPolja(false);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Ne moze se ucitati lista objekata!","GRESKA",JOptionPane.ERROR_MESSAGE);
        }
        
    }
    public void setBibliotekar(Bibliotekar admin){
        this.admin=admin;
    }
    public void namestiTabeluClanovi() throws Exception{
            model=new ClanoviTableModel();
            tableMember.setFont(new Font("Serif",Font.PLAIN,14));
            //ClanoviTableModel model=new ClanoviTableModel();
            //model.setClanovi(OpstiKontrolerKI.getInstance().ucitajSveClanove());
            //setTitle("Kreiranje rezervacije");
            tableMember.setModel(model);
        
    }
    public void namestiTabeleKnjige() throws Exception{
            modelUlaz=new KnjigeTableModel();
            modelIzlaz=new KnjigeTableModel();
            tableKnjigeUlaz.setFont(new Font("Serif",Font.PLAIN,14));
            //modelUlaz.setKnjige(OpstiKontrolerKI.getInstance().nadjiSlobodnePrimerke(kriterijum);
            tableKnjigeUlaz.setModel(modelUlaz);
            tableKnjigeIzlaz.setModel(modelIzlaz); 
    }

    private List<Knjiga> pronadjiKnjigePoKriterijumu() throws ServerskiException,Exception {
        HashMap<String,String> kriterijum=new HashMap<>();
        if(!txtSifraKnjige.getText().isEmpty()){
            kriterijum.put("sifraKnjige",txtSifraKnjige.getText());
        }
        if(!txtNazivKnjige.getText().isEmpty()){
            kriterijum.put("nazivKnjige",txtNazivKnjige.getText());
        }
        if(!txtAutorKnjige.getText().isEmpty()){
            kriterijum.put("autorKnjige",txtAutorKnjige.getText());
        }
        return OpstiKontrolerKI.getInstance().nadjiSlobodnePrimerke(kriterijum);
    }

    private boolean pripada(Knjiga knjiga) {
        for(Knjiga pom: knjigeRezervacija){
            if(pom.getSifra()==knjiga.getSifra()){
                return true;
            }
        }
        return false;
    }
    private LocalDate vratiDatumIznamljivanja()throws NumberFormatException,DateTimeException{
        LocalDate datum=null;
        String[] datumString=txtDatumIznamljivanja.getText().split("-");
        if(datumString.length==3){
            datum=LocalDate.of(Integer.parseInt(datumString[0]), Integer.parseInt(datumString[1]), Integer.parseInt(datumString[2]));
        }
        return datum;
    }
    private LocalDate vratiDatumVracanja()throws NumberFormatException,DateTimeException{
        LocalDate datum=null;
        String[] datumString=txtDatumVracanja.getText().split("-");
        if(datumString.length==3){
            datum=LocalDate.of(Integer.parseInt(datumString[0]), Integer.parseInt(datumString[1]), Integer.parseInt(datumString[2]));
        }
        return datum;
    }
    private boolean proveraPolja(){
        LocalDate datumVracanja=null;
        LocalDate datumIznamljivanja=null;
        int selected=-1;
        boolean uspesno=true;
        if(!txtDatumIznamljivanja.getText().isEmpty() && !txtDatumVracanja.getText().isEmpty()){
           try{
           datumVracanja=vratiDatumVracanja();
           datumIznamljivanja=vratiDatumIznamljivanja();
           if(datumVracanja==null || datumIznamljivanja==null){
               uspesno=false;
               JOptionPane.showMessageDialog(this, "Morate uneti datum u formatu gggg-mm-yy !","Unosenje datuma",JOptionPane.WARNING_MESSAGE);
           }else{
               if(datumVracanja.isBefore(datumIznamljivanja)){
                   uspesno=false;
                   JOptionPane.showMessageDialog(this, "Datum vracanja mora biti posle iznamljivanja","Unosenje datuma",JOptionPane.WARNING_MESSAGE);
               }
           }
           }catch(NumberFormatException | DateTimeException ex){
               uspesno=false;
               JOptionPane.showMessageDialog(this, ex,"GRESKA",JOptionPane.ERROR_MESSAGE);
           }
        }else{
            uspesno=false;
            JOptionPane.showMessageDialog(this, "Morate uneti datume iznamljivanja i vracanja","Popunite polja",JOptionPane.WARNING_MESSAGE);
        }
        selected=tableMember.getSelectedRow();
        if(selected==-1){
            uspesno=false;
            JOptionPane.showMessageDialog(this, "Morate izabrati jednog clana","Izaberite clana",JOptionPane.WARNING_MESSAGE);
        }
        if(knjigeRezervacija.isEmpty()){
            uspesno=false;
            JOptionPane.showMessageDialog(this, "Morate izabrati makar jednu knjigu","Odabir knjiga",JOptionPane.WARNING_MESSAGE);
        }
        if(uspesno){
            JOptionPane.showMessageDialog(this, "Podaci su uspesno uneti");
        }
        return uspesno;
    }

    private void kreirajRezervaciju() throws Exception {
        
            rezervacija=OpstiKontrolerKI.getInstance().kreirajRezervaciju(rezervacija);
            if(rezervacija!=null){
                JOptionPane.showMessageDialog(this, "Kreirana je rezervacija sa sifrom:"+rezervacija.getSifra());
            }
        
    }

    private void setRezervacija() {
        int selected=tableMember.getSelectedRow();
        Clan clan=((ClanoviTableModel)tableMember.getModel()).getClanovi().get(selected);
        rezervacija.setClan(clan);
        rezervacija.setDatumVracanja(vratiDatumVracanja());
        rezervacija.setDatumIznamljivanja(vratiDatumIznamljivanja());
        rezervacija.setAdmin(admin);
        //rezervacija.setStavkeRezervacije(knjigeRezervacija);
        List<Stavka_Rezervacije> stavke=new LinkedList<>();
        for(Knjiga knjiga:knjigeRezervacija){
            Stavka_Rezervacije stavka=new Stavka_Rezervacije(rezervacija.getSifra(), knjiga);
            stavke.add(stavka);
        }
        rezervacija.setStavkeRezervacije(stavke);
    }

    private void zapamtiRezervaciju() throws ServerskiException, Exception {
        boolean uspesno=OpstiKontrolerKI.getInstance().zapamtiRezervaciju(rezervacija);
    }

    private void obrisiRezervaciju() {
        try {
            boolean obrisan=OpstiKontrolerKI.getInstance().obrisiRezervaciju(rezervacija);
            if(obrisan){
                JOptionPane.showMessageDialog(this, "Podaci o rezervaciju su uspesno obrisani!");
            }
        } catch (ServerskiException ex){
            JOptionPane.showMessageDialog(this, ex,"GRESKA",JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Doslo je do prekida rada servera","GRESKA",JOptionPane.ERROR_MESSAGE);
        }
    }

    private void podesiPolja(boolean b) {
        btnKreirajRezervaciju.setEnabled(!b);
        btnReservationSave.setEnabled(b);
        btnGetMember.setEnabled(b);
        btnEjectBook.setEnabled(b);
        btnAddBook.setEnabled(b);
        btnGetBooks.setEnabled(b);
        txtTelefon.setEditable(b);
        txtAutorKnjige.setEditable(b);
        txtDatumIznamljivanja.setEditable(b);
        txtDatumVracanja.setEditable(b);
        txtNazivKnjige.setEditable(b);
        txtSifraKnjige.setEditable(b);
    }

    private void refresujPolja() throws Exception {
        txtAutorKnjige.setText("");
        txtDatumIznamljivanja.setText("");
        txtDatumVracanja.setText("");
        txtNazivKnjige.setText("");
        txtSifraKnjige.setText("");
        txtTelefon.setText("");
        namestiTabeleKnjige();
        namestiTabeluClanovi();
    }
    
}
